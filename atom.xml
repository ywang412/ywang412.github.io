<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ywang412.github.io</id>
    <title>Yu&apos;s Github</title>
    <updated>2019-06-24T05:01:16.407Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ywang412.github.io"/>
    <link rel="self" href="https://ywang412.github.io/atom.xml"/>
    <subtitle>Java by day, Scala by night</subtitle>
    <logo>https://ywang412.github.io/images/avatar.png</logo>
    <icon>https://ywang412.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Yu&apos;s Github</rights>
    <entry>
        <title type="html"><![CDATA[Coding tricks in Java syntax ]]></title>
        <id>https://ywang412.github.io/post/leetcode-118-pascals-triangle-java-type-erasure</id>
        <link href="https://ywang412.github.io/post/leetcode-118-pascals-triangle-java-type-erasure">
        </link>
        <updated>2019-06-22T00:49:32.000Z</updated>
        <content type="html"><![CDATA[<p>LeetCode has greatly sharpened my programming skills. A few examples are listed here.</p>
<p><strong>LeetCode 118</strong> Pascal's Triangle<br>
Due to Java type erasure, in order to instantiate a list of list, one can use
<code>List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();</code>
or
<code>List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;List&lt;Integer&gt;&gt;();</code>
Here <code>List&lt;Integer&gt;</code> becomes type definition.</p>
<p><strong>LeetCode 929</strong> requires removing of &quot;.&quot; in a string. It turns out &quot;.&quot; and &quot;*&quot; are metaCharacters used in a regex. From JDK 7 manual, the replaceAll() takes regex input and therefore &quot;.&quot; was recognized  as &quot;any character&quot;. Two backward slashes will escape dot character. Yet it is OK to use replace() API which can treat the &quot;.&quot; as a dot character.</p>
<p><em>JDK7</em></p>
<pre><code>String	replace(char oldChar, char newChar)
Returns a new string resulting from replacing all occurrences of oldChar in this string with newChar.
String	replaceAll(String regex, String replacement)
Replaces each substring of this string that matches the given regular expression with the given replacement.
String	replaceFirst(String regex, String replacement)
Replaces the first substring of this string that matches the given regular expression with the given replacement.
</code></pre>
<p>The solution is below,</p>
<pre><code>class Solution {
    public static int numUniqueEmails(String[] emails) {
        if (emails.length &lt; 1) return 0;

        Set&lt;String&gt; set = new HashSet&lt;&gt;();
        for (String email : emails) {
            String[] adds = email.split(&quot;@&quot;);
            String name = adds[0]; 
            if (name.indexOf(&quot;+&quot;) &gt;= 0) name = name.substring(0, name.indexOf(&quot;+&quot;));
            name = name.replaceAll(&quot;\\.&quot;,&quot;&quot;);
            set.add(name + &quot;@&quot; + adds[1]);
        }
        return set.size();
    }

    public static void main(String[] args) {
        String[] t = new String[]{&quot;testemail@leetcode.com&quot;,&quot;testemail1@leetcode.com&quot;,&quot;testemail+david@lee.tcode.com&quot;};
        System.out.println(numUniqueEmails(t));
    }
}
</code></pre>
<p><strong>LeetCode 791. Custom Sort String</strong>
Below is the code snippet to create a priorityqueue with custom comparator.</p>
<pre><code>			PriorityQueue&lt;Character&gt; queue = new PriorityQueue&lt;&gt;(new Comparator&lt;Character&gt;(){
					public int compare(Character a, Character b) {
							return Integer.compare(map.getOrDefault(a, Integer.MAX_VALUE), map.getOrDefault(b, Integer.MAX_VALUE));
					}
			});
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Publishing a personal programming blog on Github.io using Gridea]]></title>
        <id>https://ywang412.github.io/post/publishing-personal-website-on-githubio-using-gridea</id>
        <link href="https://ywang412.github.io/post/publishing-personal-website-on-githubio-using-gridea">
        </link>
        <updated>2019-06-07T00:44:23.000Z</updated>
        <content type="html"><![CDATA[<p>I've always wanted to start a programmer's blog because I learned a huge amount from others' tech blog. But hosting and maintaining a blog website could require lots of effort. I came across this Gridea tool (https://github.com/getgridea/gridea) which features html/css static content generation and github.io auto publishing. It helps immensely writing a programming blog.</p>
<p>After downloading and installing the Gridea tool, the first thing is to link it in order to publish on github.io. The settings tab is quite self-explanatory. <img src="https://ywang412.github.io/post-images/1561227293749.png" alt=""></p>
<p>The publishing will require a github token for authentication which can be generated here https://github.com/settings/tokens . Remember to use <strong>repo scope</strong> access token to reduce vulnerability.
<img src="https://ywang412.github.io/post-images/1561227595716.png" alt=""></p>
<p>The best thing about Gridea is auto-generation of markdown tags and corresponding hotkeys. <img src="https://ywang412.github.io/post-images/1561227880490.png" alt=""></p>
<pre><code>object SumOfMultiples {
  def sum(factors: Set[Int], limit: Int): Int = {
    factors.map(x =&gt; Stream.range(1, limit / x + 1).map(_ * x).takeWhile(_ &lt; limit).toList).flatMap(x =&gt; x).sum
  }
}
</code></pre>
<p>The last thing I want to mention is the comment function. Currently, only Gitalk and Disqus third-party API are allowed. I choose Disqus for its simpler setting. <img src="https://ywang412.github.io/post-images/1561228499134.png" alt="">
Register a free account on disqus and create a new application. The public api key will appear in the application confirmation page. The short name can be located on the admin page. <img src="https://ywang412.github.io/post-images/1561229354797.png" alt=""></p>
<p>I enjoyed very much the writing and seeing the outcome on github.io. Now I have a personal blog that motivates me to write once a while to share knowledge and help others. Kudos!</p>
]]></content>
    </entry>
</feed>